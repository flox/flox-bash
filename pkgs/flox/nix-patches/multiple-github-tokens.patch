commit 2c3e3a4d84b02618d3feac9a4131bc613499a231
Author: Michael Brantley <brantley@domain.name>
Date:   Tue Dec 6 20:39:42 2022 +0000

    Match multiple tokens for repositories on github.com only
    
    This patch allows the serving of different tokens for specific
    repositories on github.com only. It could be generalized for use
    on all repositories but serves the purpose for now.
    
    TODO: add tests and document before logging PR against upstream.

diff --git a/src/libfetchers/github.cc b/src/libfetchers/github.cc
index a491d82a6..045c443ea 100644
--- a/src/libfetchers/github.cc
+++ b/src/libfetchers/github.cc
@@ -157,18 +157,26 @@ struct GitArchiveInputScheme : InputScheme
         return input;
     }
 
-    std::optional<std::string> getAccessToken(const std::string & host) const
+    std::optional<std::string> getAccessToken(const std::string & host, const std::string & url) const
     {
         auto tokens = fetchSettings.accessTokens.get();
+        std::string answer;
+        if(! url.empty()){
+            for (auto & token : tokens)
+                if (url.find(token.first) != std::string::npos)
+                    answer = token.second;
+            if (!answer.empty())
+                return answer;
+        }
         if (auto token = get(tokens, host))
             return *token;
         return {};
     }
 
-    Headers makeHeadersWithAuthTokens(const std::string & host) const
+    Headers makeHeadersWithAuthTokens(const std::string & host,const std::string & url) const
     {
         Headers headers;
-        auto accessToken = getAccessToken(host);
+        auto accessToken = getAccessToken(host, url);
         if (accessToken) {
             auto hdr = accessHeaderFromToken(*accessToken);
             if (hdr)
@@ -249,7 +257,10 @@ struct GitHubInputScheme : GitArchiveInputScheme
             : "https://%s/api/v3/repos/%s/%s/commits/%s",
             host, getStrAttr(input.attrs, "owner"), getStrAttr(input.attrs, "repo"), *input.getRef());
 
-        Headers headers = makeHeadersWithAuthTokens(host);
+        auto urlGen = fmt(
+            "%s/%s/%s/%s",
+            host, getStrAttr(input.attrs, "owner"), getStrAttr(input.attrs, "repo"), *input.getRef());
+        Headers headers = makeHeadersWithAuthTokens(host, urlGen);
 
         auto json = nlohmann::json::parse(
             readFile(
@@ -272,7 +283,10 @@ struct GitHubInputScheme : GitArchiveInputScheme
             host, getStrAttr(input.attrs, "owner"), getStrAttr(input.attrs, "repo"),
             input.getRev()->to_string(Base16, false));
 
-        Headers headers = makeHeadersWithAuthTokens(host);
+        auto urlGen = fmt(
+            "%s/%s/%s/%s",
+            host, getStrAttr(input.attrs, "owner"), getStrAttr(input.attrs, "repo"), *input.getRef());
+        Headers headers = makeHeadersWithAuthTokens(host, urlGen);
         return DownloadUrl { url, headers };
     }
 
@@ -316,7 +330,10 @@ struct GitLabInputScheme : GitArchiveInputScheme
         auto url = fmt("https://%s/api/v4/projects/%s%%2F%s/repository/commits?ref_name=%s",
             host, getStrAttr(input.attrs, "owner"), getStrAttr(input.attrs, "repo"), *input.getRef());
 
-        Headers headers = makeHeadersWithAuthTokens(host);
+        auto urlGen = fmt(
+            "%s/%s/%s/%s",
+            host, getStrAttr(input.attrs, "owner"), getStrAttr(input.attrs, "repo"), *input.getRef());
+        Headers headers = makeHeadersWithAuthTokens(host, urlGen);
 
         auto json = nlohmann::json::parse(
             readFile(
@@ -339,7 +356,10 @@ struct GitLabInputScheme : GitArchiveInputScheme
             host, getStrAttr(input.attrs, "owner"), getStrAttr(input.attrs, "repo"),
             input.getRev()->to_string(Base16, false));
 
-        Headers headers = makeHeadersWithAuthTokens(host);
+        auto urlGen = fmt(
+            "%s/%s/%s/%s",
+            host, getStrAttr(input.attrs, "owner"), getStrAttr(input.attrs, "repo"), *input.getRef());
+        Headers headers = makeHeadersWithAuthTokens(host, urlGen);
         return DownloadUrl { url, headers };
     }
 
@@ -379,7 +399,10 @@ struct SourceHutInputScheme : GitArchiveInputScheme
         auto base_url = fmt("https://%s/%s/%s",
             host, getStrAttr(input.attrs, "owner"), getStrAttr(input.attrs, "repo"));
 
-        Headers headers = makeHeadersWithAuthTokens(host);
+        auto urlGen = fmt(
+            "%s/%s/%s/%s",
+            host, getStrAttr(input.attrs, "owner"), getStrAttr(input.attrs, "repo"), *input.getRef());
+        Headers headers = makeHeadersWithAuthTokens(host, urlGen);
 
         std::string refUri;
         if (ref == "HEAD") {
@@ -426,7 +449,7 @@ struct SourceHutInputScheme : GitArchiveInputScheme
             host, getStrAttr(input.attrs, "owner"), getStrAttr(input.attrs, "repo"),
             input.getRev()->to_string(Base16, false));
 
-        Headers headers = makeHeadersWithAuthTokens(host);
+        Headers headers = makeHeadersWithAuthTokens(host, url);
         return DownloadUrl { url, headers };
     }
 
